have an array of objects {
    - on button press interact with array[random number depending on length of array]
    - this gets an object
    - then we can interact with the object
    - call on damageShip
}

class Ship {
    constructor(name, hitPoints, damageReceived, color, type, id) {
        this.name = name;
        this.hitPoints = hitPoints;
        this.damageReceived = damageReceived;
        this.color = color;
        this.height = 50px;
        this.width = 70px;
        this.type = type;
        this.isDestroyed = false;
        this.id = `${this.type}${id}`
    }

    makeShip() {
        let ship = document.createElement('div')
        ship.style.width = this.width;
        ship.style.height = this.height;
        ship.style.textAlign = "center";
        ship.style.backgroundColor = this.color
        ship.id = `${this.id}`
        ship.innerHTML = `
            <h3>${this.name}</h3>
            <h5>${this.hitPoints}</h5>
        `
        row = document.getElementbyClass(`${this.type}`)
        row.appendChild(ship)
    }

    updateShip() {
        ship = document.getElementByID(`${this.id}`)
        ship.innerHTML = `
            <h3>${this.name}</h3>
            <h5>${this.hitPoints}</h5>
        `
        ship.style.backgroundColor = this.color
    }

    damageShip() {
        this.hitPoints -= this.damageReceived;
        if (this.hitPoints <= 0) {
            destroyShip()
        } else {
            this.updateShip()
        }
    }

    destroyShip() {
        this.color = "black"
        this.hitPoints = "0"
        this.isDestroyed = true
        this.updateShip()
    }
}


class MotherShip extends ship {
    constructor(id) {
        super("Mother Ship", 100, 9, "red", "mother-ship", id)
    }

    gameOver() {

    }
}

class DefenceShip extends ship {
    constructor(id) {
        super("Defence Ship", 80, 10, "green", "defence-ships", id)
    }
}

class AttackShip extends ship {
    constructor(id) {
        super("Attack Ship", 45, 12, "green", "attack-ships", id)
    }
}

